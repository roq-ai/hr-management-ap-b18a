generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id  String    @db.Uuid
  date         DateTime  @db.Timestamp(6)
  time_in      DateTime  @db.Timestamp(6)
  time_out     DateTime? @db.Timestamp(6)
  hours_worked Int?
  overtime     Int?
  status       String?   @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  employee     employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  address     String?      @db.VarChar(255)
  city        String?      @db.VarChar(255)
  country     String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department  department[]
  employee    employee[]
  project     project[]
}

model department {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  company_id String    @db.Uuid
  manager_id String    @db.Uuid
  budget     Int?
  location   String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  company    company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee   employee  @relation(fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project    project[]
}

model employee {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String       @db.VarChar(255)
  last_name  String       @db.VarChar(255)
  position   String       @db.VarChar(255)
  salary     Int
  hire_date  DateTime     @db.Timestamp(6)
  user_id    String       @db.Uuid
  company_id String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  attendance attendance[]
  department department[]
  company    company      @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project    project[]
}

model project {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  start_date    DateTime   @db.Timestamp(6)
  end_date      DateTime?  @db.Timestamp(6)
  budget        Int?
  company_id    String     @db.Uuid
  department_id String     @db.Uuid
  manager_id    String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  company       company    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department    department @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee      employee   @relation(fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  employee    employee[]
}
